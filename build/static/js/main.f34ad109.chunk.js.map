{"version":3,"sources":["components/FormPlus/components/LetfToolBar.tsx","components/FormPlus/components/ColorSelect.tsx","components/FormPlus/components/OptionSelect.tsx","components/FormPlus/components/ComputeRuleConfig.tsx","components/FormPlus/components/TreeOptionSelect.tsx","components/FormPlus/components/Setting.tsx","components/FormPlus/utils/utils.ts","components/FormPlus/components/DesignerBoard.tsx","components/FormPlus/components/AmountInWordsConfig.tsx","components/FormPlus/components/ScanCodeConfig.tsx","components/FormPlus/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LetfToolBar","props","mode","selectedKeys","style","height","Item","icon","EditOutlined","onClick","onSelected","FormOutlined","InfoCircleOutlined","BlockOutlined","CalculatorOutlined","CodeOutlined","TableOutlined","PictureOutlined","SketchPicker","require","ColorSelect","useState","showColorPanelBoard","setShowColorPanelBoard","value","readOnly","position","width","top","left","zIndex","color","onChange","hex","Option","Select","OptionSelect","addItemValue","setAddItemValue","labelInValue","showSearch","menuItemSelectedIcon","defualtData","undefined","placeholder","dropdownRender","menu","margin","display","flexWrap","padding","size","flex","e","target","cursor","marginLeft","trim","options","label","Date","valueOf","toString","PlusOutlined","v","map","c","children","item","justifyContent","alignItems","MinusOutlined","stopPropagation","Modal","confirm","title","ExclamationCircleOutlined","content","okText","cancelText","onOk","filter","ComputeRuleConfig","showModal","setShowModal","getControlTree","parent","controlsAttrs","belongTo","name","tableField","split","dataType","length","i","push","describe","key","treeData","visible","centered","okButtonProps","onCancel","borderRight","defaultExpandAll","onSelect","node","computeControl","find","controlName","summary","type","summaryStatus","overflow","paddingTop","Text","mark","marginTop","background","backgroundSize","closable","onClose","preventDefault","fc","onDoubleClick","tag","Array","fill","textAlign","placement","Paragraph","Link","href","schema","definitions","properties","disabled","items","$ref","additionalItems","required","TreeOptionSelect","CascaderRender","useMemo","data","JSON","parse","replace","valid","Ajv","compile","validate","selectedOptions","defaultData","marginBottom","code","border","theme","fontSize","Title","level","event","Sider","Layout","SubFormItem","DraggableTree","argument","onDragEnter","info","onDrop","dragNode","console","warn","attr","cc","index","findIndex","detailTableName","detailTableFields","firstFieldIndex","splice","targetName","dropPosition","targetIndex","tableFieldsLength","slice","unshift","selectable","className","defaultExpandedKeys","this","draggable","blockNode","React","Component","Setting","formRef","createRef","settingPanel","setSettingPanel","useEffect","controlElement","controlAttrs","current","setFieldsValue","text","fieldTR","getAttribute","MacroControlsConfig","configComponent","macroControlsConfig","controlType","trigger","collapsible","collapsed","bodyStyle","ref","labelCol","span","wrapperCol","labelAlign","onValuesChange","values","macroConfig","format","tooltip","Group","includes","borderTop","borderBottom","borderLeft","innerHTML","optionType","autoWidth","AlignLeftOutlined","AlignCenterOutlined","AlignRightOutlined","setProperty","removeProperty","multiple","removeAttribute","setAttribute","trs","getElementsByTagName","overflowX","onControlsAttrsChange","collapsedWidth","ControlOutlined","OrderedListOutlined","getControlBelongTo","el","parentElement","tagName","id","getParentControl","getIdsFromHTMLCollection","HTMLCollection","ids","Content","DesignerBoard","editorRef","useRef","editor","execCommand","minHeight","boxSizing","apiKey","init","document","body","clientHeight","plugins","contextmenu","tc","menubar","toolbar","quickbars_selection_toolbar","noneditable_noneditable_class","tinycomments_mode","content_style","language","extended_valid_elements","onEditorChange","a","controls","getElementsByClassName","contentWindow","controlsArrar","onInit","ev","window","srcElement","onControlSelect","element","AmountInWordsConfig","priceField","precision","ScanCodeConfig","transField","scanCodeType","Header","FormPlus","setCollapsed","setControlType","removeControlsAttrs","setRemoveControlsAttrs","setControlElement","lineHeight","fontWeight","html","align","bold","italic","fontFamily","allowedModify","editControl","layout","roundType","computeRule","backgroundColor","boxShadow","createElement","MenuUnfoldOutlined","MenuFoldOutlined","transition","float","extra","control","htmlStr","controlIds","_removeControlsAttrs","con","resultControlsAttrs","recoveryControlsAttrs","iframe","getElementById","controlIdItem","conn","getParentDetailTableFieldTr","controlsAttr","newControlsAttrs","App","setValue","log","FileSearchOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f34ad109.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Menu } from \"antd\";\r\nimport { CodeOutlined, EditOutlined, FormOutlined, TableOutlined, PictureOutlined, CalculatorOutlined, BlockOutlined, InfoCircleOutlined } from \"@ant-design/icons\";\r\n\r\n/**\r\n * 左侧菜单栏\r\n * @param {*} props \r\n * @param {(type:String)=>void} props.onSelected\r\n * @returns \r\n */\r\nconst LetfToolBar:React.FC<{onSelected:(type:string)=>void}> = (props) => {\r\n    return <Menu mode=\"inline\" selectedKeys={[]} style={{ height: \"calc(100% - 64px)\" }}>\r\n        <Menu.Item key=\"input\" icon={<EditOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"input\") }}>\r\n            文本框\r\n        </Menu.Item>\r\n        <Menu.Item key=\"richInput\" icon={<FormOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"richInput\") }}>\r\n            多行文本框\r\n        </Menu.Item>\r\n        <Menu.Item key=\"radio\" icon={<InfoCircleOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"radio\") }}>\r\n            单选\r\n        </Menu.Item>\r\n        <Menu.Item key=\"checkBox\" icon={<InfoCircleOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"checkBox\") }}>\r\n            复选\r\n        </Menu.Item>\r\n        <Menu.Item key=\"listBox\" icon={<BlockOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"listBox\") }}>\r\n            下拉选择器\r\n        </Menu.Item>\r\n        <Menu.Item key=\"compute\" icon={<CalculatorOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"compute\") }}>\r\n            计算控件\r\n        </Menu.Item>\r\n        <Menu.Item key=\"macro\" icon={<CodeOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"macro\") }}>\r\n            宏控件\r\n        </Menu.Item>\r\n        <Menu.Item key=\"detailTable\" icon={<TableOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"detailTable\") }}>\r\n            明细子表\r\n        </Menu.Item>\r\n        <Menu.Item key=\"treeListBox\" icon={<BlockOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"treeListBox\") }}>\r\n            级联选择器\r\n        </Menu.Item>\r\n        <Menu.Item key=\"image\" icon={<PictureOutlined />} onClick={() => { if (props.onSelected && typeof props.onSelected === \"function\") props.onSelected(\"image\") }}>\r\n            图片\r\n        </Menu.Item>\r\n    </Menu>\r\n}\r\n\r\nexport default LetfToolBar;","import React, { useState } from 'react';\r\nimport { Input } from 'antd';\r\n\r\n\r\nconst { SketchPicker } = require(\"react-color\");\r\n/**\r\n * 颜色选择器\r\n * @param {*} props \r\n * @param {String} props.value\r\n * @param {(v:String)=>void} props.onChange\r\n * @returns \r\n */\r\nconst ColorSelect: React.FC<{ value?: string; onChange?: (v: string) => void }> = (props) => {\r\n    const [showColorPanelBoard, setShowColorPanelBoard] = useState(false);\r\n    return <>\r\n        <Input value={props.value} readOnly onClick={() => setShowColorPanelBoard(true)} />\r\n        {showColorPanelBoard ?\r\n            <>\r\n                <div style={{ position: \"fixed\", width: \"100%\", height: \"100%\", top: 0, left: 0 }} onClick={() => setShowColorPanelBoard(false)}></div>\r\n                <div style={{ position: \"fixed\", zIndex: 100 }}><SketchPicker color={props.value} onChange={({ hex }: { hex: string }) => {\r\n                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                        props.onChange(hex);\r\n                    }\r\n                }} /></div>\r\n            </>\r\n            : null}\r\n    </>\r\n}\r\n\r\nexport default ColorSelect;","import React, { useState } from 'react';\r\nimport { Divider, Input, Select, Modal } from 'antd';\r\nimport { PlusOutlined, MinusOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n/**\r\n * 下拉选择器选项设置控件\r\n * @param {*} props \r\n * @param {{defualtData?: { label: string; value: string }[]; options: { label: string; value: string }[]}} props.value\r\n * @param {(v: { defualtData?: { label: string; value: string }[]; options?: { label: string; value: string }[] }) => void} props.onChange\r\n * @param {\"multiple\" | \"tags\"} props.mode \r\n * @returns \r\n */\r\nconst OptionSelect: React.FC<{\r\n    value?: { defualtData?: { label: string; value: string }[]; options: { label: string; value: string }[] };\r\n    onChange?: (v: { defualtData?: { label: string; value: string }[]; options?: { label: string; value: string }[] }) => void;\r\n    mode?: \"multiple\" | \"tags\";\r\n}> = (props) => {\r\n    const [addItemValue, setAddItemValue] = useState<string>();\r\n    return <Select\r\n        labelInValue\r\n        showSearch\r\n        mode={props.mode}\r\n        menuItemSelectedIcon={null}\r\n        value={props.value && props.value.defualtData ? (props.mode == \"multiple\" ? props.value.defualtData : (props.value.defualtData[0] ?? undefined)) : (props.mode == \"multiple\" ? [] : undefined)}\r\n        placeholder=\"请选择默认值\"\r\n        dropdownRender={menu => (\r\n            <div>\r\n                {menu}\r\n                <Divider style={{ margin: '4px 0' }} />\r\n                <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                    <Input size=\"small\" style={{ flex: 'auto' }} value={addItemValue} onChange={e => setAddItemValue(e.target.value)} />\r\n                    <a\r\n                        style={{ flex: 'none', display: 'block', cursor: 'pointer', marginLeft: 10 }}\r\n                        onClick={() => {\r\n                            if (addItemValue && addItemValue.trim() != \"\") {\r\n                                if (props.onChange && typeof props.onChange === \"function\") {\r\n                                    props.onChange({ defualtData: props.value?.defualtData, options: [...(props.value ? props.value.options : []), { label: addItemValue, value: (new Date()).valueOf().toString() }] });\r\n                                }\r\n                                setAddItemValue(undefined);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <PlusOutlined /> 添加选项\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )}\r\n        onChange={(v: any) => {\r\n            if (props.onChange && typeof props.onChange === \"function\") {\r\n                if (props.mode == \"multiple\") props.onChange({ ...props.value, defualtData: (v ? v.map((c: any) => ({ label: c.label.props != undefined ? c.label.props.children[0].props.children : c.label, value: c.value })) : []) });\r\n                else props.onChange({ ...props.value, defualtData: [{ label: v.label.props != undefined ? v.label.props.children[0].props.children : v.label, value: v.value }] });\r\n            }\r\n        }}\r\n    >\r\n        {(props.value ? props.value.options : []).map(item => (\r\n            <Option key={item.value} value={item.label + \"|▲|\" + item.value}><div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}><span>{item.label}</span><MinusOutlined style={{ color: \"#1890ff\" }} onClick={e => {\r\n                e.stopPropagation();\r\n                Modal.confirm({\r\n                    title: '删除选项',\r\n                    icon: <ExclamationCircleOutlined />,\r\n                    content: '确认删除吗？删除后可能对历史数据造成影响。',\r\n                    okText: '确认',\r\n                    cancelText: '取消',\r\n                    onOk: () => {\r\n                        if (props.onChange && typeof props.onChange === \"function\") {\r\n                            props.onChange({ defualtData: (props.value?.defualtData ?? []).filter((c: any) => item.label + \"|▲|\" + item.value != c.value), options: (props.value ? props.value.options : []).filter(c => c.value != item.value) });\r\n                            // else props.onChange({ defualtData: (props.value && props.value.defualtData ? item.label + \"|▲|\" + item.value == props.value.defualtData.value ? undefined : props.value.defualtData.value : undefined), options: (props.value ? props.value.options : []).filter(c => c.value != item.value) });\r\n                        }\r\n                    }\r\n                });\r\n            }} /></div></Option>\r\n        ))}\r\n    </Select>\r\n}\r\n\r\nexport default OptionSelect;","import React, { useState } from 'react';\r\nimport { Button, Modal, Tree, Tag, Tooltip, Typography } from 'antd';\r\nimport { IControlsAttrs } from '../data';\r\n\r\n/**\r\n * 控件树数据接口\r\n */\r\ninterface IControlsAttrsTree extends IControlsAttrs {\r\n    children: IControlsAttrsTree[]\r\n}\r\n\r\nexport interface ComputeRuleConfigValue {\r\n    key: string | number;\r\n    type: string;\r\n    label: string | number;\r\n    value?: string;\r\n    summary?: boolean;\r\n    summaryStatus?: boolean;\r\n    belongTo?: string;\r\n    tableField?: boolean;\r\n}\r\n/**\r\n * 配置计算规则\r\n * @param {*} props \r\n * @param {String[]} props.controlName\r\n * @param {ComputeRuleConfigValue[]} props.value\r\n * @param {(v:ComputeRuleConfigValue[])=>void} props.onChange\r\n * @param {*[见index]} props.controlsAttrs\r\n * @returns \r\n */\r\nconst ComputeRuleConfig: React.FC<{ controlName: string; value?: ComputeRuleConfigValue[]; onChange?: (v?: ComputeRuleConfigValue[]) => void; controlsAttrs: IControlsAttrs[] }> = (props) => {\r\n    const [showModal, setShowModal] = useState(false);//控制弹框显示\r\n    const [selectedKeys] = useState([]);//已选择树节点key，现在要使用只是点击获取节点信息，所以这里面永远不会存值\r\n    //将现有控件以树的形式进行展示\r\n    const getControlTree = (parent: IControlsAttrsTree) => {\r\n        let children = props.controlsAttrs.filter(c => c.belongTo == parent.name && c.tableField && ((c.name.split(\"_\")[0] == \"input\" && c.dataType != \"text\") || c.name.split(\"_\")[0] == \"detailTable\" || c.name.split(\"_\")[0] == \"compute\"));\r\n        if (children.length > 0) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                parent.children.push(getControlTree({ ...children[i], children: [] }));\r\n            }\r\n        }\r\n        return {\r\n            ...parent,\r\n            title: parent.describe,\r\n            key: parent.name,\r\n        };\r\n    }\r\n    const treeData: any[] = [\r\n        {\r\n            title: '全部',\r\n            key: '全部',\r\n            children: props.controlsAttrs.filter(c => (c.belongTo == \"window\" || c.tableField == undefined) && ((c.name.split(\"_\")[0] == \"input\" && c.dataType != \"text\") || c.name.split(\"_\")[0] == \"detailTable\" || c.name.split(\"_\")[0] == \"compute\")).map(c => ({ ...c, children: [] })).map(c => getControlTree(c))\r\n        }\r\n    ];\r\n    return <>\r\n        <Button onClick={() => { setShowModal(true) }}>点击配置</Button>\r\n        <Modal\r\n            title=\"计算规则配置\"\r\n            visible={showModal}\r\n            width={800}\r\n            centered\r\n            okButtonProps={{ style: { display: \"none\" } }}\r\n            cancelText=\"关闭\"\r\n            onCancel={() => {\r\n                setShowModal(false);\r\n            }}\r\n        >\r\n            <div style={{ display: \"flex\", height: 400 }}>\r\n                <div style={{ width: 200, borderRight: \"1px solid #efefef\" }}>\r\n                    <Tree treeData={treeData} height={400} defaultExpandAll selectedKeys={selectedKeys} onSelect={(selectedKeys, e: any) => {\r\n                        if (e.node.key != \"全部\" && e.node.key.toString().split(\"_\")[0] != \"detailTable\") {\r\n                            if (props.onChange && typeof props.onChange === \"function\") {\r\n                                let computeControl: any = props.controlsAttrs.find(c => c.name == props.controlName);\r\n                                let summary = computeControl.belongTo == e.node.belongTo && computeControl.belongTo != \"window\" && e.node.tableField && computeControl.tableField;\r\n                                props.onChange([...props.value ?? [], {\r\n                                    key: new Date().valueOf(),\r\n                                    type: \"control\",\r\n                                    label: e.node.describe,\r\n                                    value: e.node.name,\r\n                                    summary: summary,\r\n                                    summaryStatus: false,\r\n                                    belongTo: e.node.belongTo,\r\n                                    tableField: e.node.tableField,\r\n                                }]);\r\n                            }\r\n                        }\r\n                    }} />\r\n                </div>\r\n                <div style={{ flex: 1, height: \"100%\", overflow: \"auto\", padding: 16, paddingTop: 0 }}>\r\n                    <Typography.Text type=\"danger\">注意：点击<Typography.Text mark>左侧控件</Typography.Text>和下方<Typography.Text mark>数字、运算符</Typography.Text>完成计算规则配置：</Typography.Text>\r\n                    <div style={{ height: 152, marginTop: 8, background: \"linear-gradient(90deg,rgba(211,211,211,.5) 50%,transparent 0),linear-gradient(rgba(211,211,211,.5) 50%,transparent 0)\", backgroundSize: \"5px 5px\" }}>\r\n                        {(props.value ?? []).map((c, i) => <Tag style={{ cursor: \"pointer\" }} key={i} closable onClose={e => {\r\n                            e.preventDefault();\r\n                            if (props.onChange && typeof props.onChange === \"function\") {\r\n                                props.onChange((props.value ?? []).filter(fc => fc.key != c.key));\r\n                            }\r\n                        }}\r\n                            onDoubleClick={() => {\r\n                                let computeControl: any = props.controlsAttrs.find(c => c.name == props.controlName);\r\n                                if (computeControl.belongTo == c.belongTo && computeControl.belongTo != \"window\" && c.tableField && computeControl.tableField) {\r\n                                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                                        let value = props.value;\r\n                                        let tag: any = (props.value ?? []).find(fc => fc.key == c.key);\r\n                                        tag.summaryStatus = !tag.summaryStatus;\r\n                                        props.onChange(value);\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >{c.label}{!c.summaryStatus && c.belongTo != \"window\" ? \"列汇总值\" : \"\"}</Tag>)}\r\n                    </div>\r\n                    <div style={{ marginTop: 16 }}>\r\n                        数字：\r\n                        {new Array(10).fill(\"\").map((c, i) => <Tag style={{ cursor: \"pointer\" }} key={i} onClick={() => {\r\n                            if (props.onChange && typeof props.onChange === \"function\") {\r\n                                props.onChange([...(props.value ?? []), {\r\n                                    key: new Date().valueOf(),\r\n                                    type: \"num\",\r\n                                    label: i\r\n                                }]);\r\n                            }\r\n                        }}>{i}</Tag>)}\r\n                        <Tag style={{ width: 22.47, textAlign: \"center\", cursor: \"pointer\" }} onClick={() => {\r\n                            if (props.onChange && typeof props.onChange === \"function\") {\r\n                                props.onChange([...(props.value ?? []), {\r\n                                    key: new Date().valueOf(),\r\n                                    type: \"num\",\r\n                                    label: \".\"\r\n                                }]);\r\n                            }\r\n                        }} >.</Tag>\r\n                    </div>\r\n                    <div style={{ marginTop: 16 }}>\r\n                        操作：\r\n                        {[\r\n                            { title: \"加\", label: \"+\" },\r\n                            { title: \"减\", label: \"-\" },\r\n                            { title: \"乘\", label: \"×\" },\r\n                            { title: \"除\", label: \"÷\" },\r\n                            { title: \"取余\", label: \"%\" },\r\n                            { title: \"左括号\", label: \"(\" },\r\n                            { title: \"右括号\", label: \")\" }\r\n                        ].map((c, i) => <Tooltip title={c.title} placement=\"bottom\"><Tag key={i} style={{ cursor: \"pointer\" }} onClick={() => {\r\n                            if (props.onChange && typeof props.onChange === \"function\") {\r\n                                props.onChange([...(props.value ?? []), {\r\n                                    key: new Date().valueOf(),\r\n                                    type: \"operator\",\r\n                                    label: c.label\r\n                                }]);\r\n                            }\r\n                        }}>{c.label}</Tag></Tooltip>)}\r\n                    </div>\r\n                    <br />\r\n                    <Typography.Text>特别提醒：</Typography.Text>\r\n                    <Typography.Paragraph>\r\n                        <ul>\r\n                            <li>\r\n                                <Typography.Link href=\"#\">明细表中数值字段双击可切换为当前行的值或列汇总值。</Typography.Link>\r\n                            </li>\r\n                            <li>\r\n                                <Typography.Link href=\"#\">如果计算的结果在明细表之外，只能与明细表字段汇总值进行计算。</Typography.Link>\r\n                            </li>\r\n                        </ul>\r\n                    </Typography.Paragraph>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    </>;\r\n}\r\n\r\nexport default ComputeRuleConfig;","import React, { useMemo, useState } from 'react';\r\nimport { Button, Cascader, Modal, Typography } from 'antd';\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-noconflict/mode-json'; // json模式的包\r\nimport 'ace-builds/src-noconflict/theme-xcode'; // xcode皮肤\r\nimport Ajv from \"ajv\";//用于验证JSON是否合法\r\nimport { CascaderOptionType } from 'antd/lib/cascader';\r\n\r\n//定义JSON格式\r\nconst schema = {\r\n    definitions: {\r\n        children: {\r\n            type: \"object\",\r\n            properties: {\r\n                label: { type: \"string\" },\r\n                value: { type: \"string\" },\r\n                disabled: { type: \"boolean\" },\r\n                children: {\r\n                    type: \"array\",\r\n                    items: [\r\n                        { $ref: \"#/definitions/children\" }\r\n                    ],\r\n                    additionalItems: true\r\n                }\r\n            },\r\n            required: [\"value\"],\r\n            // additionalProperties: false,\r\n        }\r\n    },\r\n    type: \"array\",\r\n    items: [\r\n        { $ref: \"#/definitions/children\" }\r\n    ],\r\n    additionalItems: true\r\n}\r\n\r\n// interface TreeOptionSelectOptions {\r\n//     value: string;\r\n//     label?: string;\r\n//     disabled?: boolean;\r\n//     children?: TreeOptionSelectOptions[]\r\n// }\r\n/**\r\n * 级联（树）选择器组件\r\n * @param {*} props \r\n * @param {{defualtData:{label:String;value:String}[];options:见第9行定义}} props.value\r\n * @param {(v:{defualtData:{label:String;value:String}[];options:见第9行定义})=>void} props.onChange\r\n * @returns \r\n */\r\nconst TreeOptionSelect: React.FC<{\r\n    value?: { defaultData?: CascaderOptionType[]; options: string };\r\n    onChange?: (v: { defaultData?: CascaderOptionType[]; options?: string }) => void\r\n}> = (props) => {\r\n    const [showModal, setShowModal] = useState(false);//控制弹框显示\r\n    const demoValue = `[\r\n    {\r\n        \"value\":\"\",         /**必须*/\r\n        \"label\":\"\",         /**非必须[建议配置]*/\r\n        \"disabled\":false,   /**非必须*/\r\n        \"children\":[        /**非必须*/\r\n            {\r\n            \"value\":\"\",\r\n            \"label\":\"\",\r\n            },\r\n            {\r\n            \"value\":\"\",\r\n            \"label\":\"\",\r\n            \"children\":[\r\n                {\r\n                    \"value\":\"\",\r\n                    \"label\":\"\",\r\n                },\r\n                {\r\n                    \"value\":\"\",\r\n                    \"label\":\"\",\r\n                },\r\n                ...\r\n            ]\r\n            },\r\n            ...\r\n        ]\r\n    },\r\n    {\r\n        \"value\":\"\",\r\n        \"label\":\"\",\r\n    },\r\n    ...\r\n]`;\r\n    const CascaderRender = useMemo(() => {\r\n        let data;\r\n        if (props.value) {\r\n            try {\r\n                data = JSON.parse(props.value.options.replace(/[\\r\\n]/g, \"\").trim());\r\n            }\r\n            catch (e) {\r\n                data = [];\r\n            }\r\n            const ajv = new Ajv();\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(data)\r\n            return <Cascader\r\n                disabled={!valid}\r\n                placeholder={valid ? \"请选择默认值\" : \"数据格式不正确\"}\r\n                options={valid ? data : []}\r\n                onChange={(value, selectedOptions) => {\r\n                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                        props.onChange({\r\n                            ...props.value, defaultData: selectedOptions\r\n                        });\r\n                    }\r\n                }}\r\n            />\r\n        }\r\n        return;\r\n    }, [props.value])\r\n    return <>\r\n        <Button type=\"primary\" style={{ width: 90, marginBottom: 2 }} onClick={() => setShowModal(true)}>添加选项</Button>\r\n        {CascaderRender}\r\n        <Modal\r\n            title=\"添加选项\"\r\n            visible={showModal}\r\n            width={800}\r\n            centered\r\n            okButtonProps={{ style: { display: \"none\" } }}\r\n            cancelText=\"关闭\"\r\n            onCancel={() => {\r\n                setShowModal(false);\r\n            }}\r\n        >\r\n            <Typography.Paragraph>\r\n                请在第二个编辑器中通过<Typography.Text code>JSON</Typography.Text>的方式配置你的级联选择器数据源，配置完成后，可以在选项中查看。格式如下：\r\n            </Typography.Paragraph>\r\n            <div style={{ border: \"1px solid #efefef\" }}>\r\n                <AceEditor\r\n                    readOnly\r\n                    mode='json'\r\n                    theme=\"xcode\"\r\n                    fontSize={12}\r\n                    value={demoValue}\r\n                    style={{ width: '100%', height: 200 }}\r\n                />\r\n            </div>\r\n            <Typography.Title level={5} style={{ marginTop: 8 }}>\r\n                你的配置：\r\n            </Typography.Title>\r\n            <div style={{ border: \"1px solid #efefef\" }}>\r\n                <AceEditor\r\n                    mode='json'\r\n                    theme=\"xcode\"\r\n                    fontSize={12}\r\n                    onChange={(value, event) => {\r\n                        if (props.onChange && typeof props.onChange === \"function\") {\r\n                            props.onChange({\r\n                                ...props.value, options: value\r\n                            });\r\n                        }\r\n                    }}\r\n                    value={props.value ? props.value.options : \"\"}\r\n                    style={{ width: '100%', height: 200, marginTop: 0 }}\r\n                />\r\n            </div>\r\n        </Modal>\r\n    </>\r\n}\r\n\r\nexport default TreeOptionSelect;","import React, { useMemo, useState } from 'react';\r\nimport { Menu, Card, Form, Input, Layout, Select, InputNumber, Radio, Checkbox, Tooltip, Tree } from \"antd\";\r\nimport { ControlOutlined, AlignLeftOutlined, AlignCenterOutlined, AlignRightOutlined, OrderedListOutlined } from \"@ant-design/icons\";\r\nimport ColorSelect from './ColorSelect';\r\nimport OptionSelect from './OptionSelect';\r\nimport { useEffect } from 'react';\r\nimport ComputeRuleConfig from './ComputeRuleConfig';\r\nimport TreeOptionSelect from './TreeOptionSelect';\r\nimport { IControlsAttrs, MacroControlsConfig } from '../data';\r\n\r\nconst { Sider } = Layout;\r\n\r\n/**\r\n * 二级FormItem，主要用于控制onChange的执行顺序\r\n */\r\nconst SubFormItem: React.FC<any> = (props: any) => {\r\n    return <div>\r\n        {{\r\n            ...props.children,\r\n            props: {\r\n                ...props.children.props,\r\n                value: props.value,\r\n                onChange: (...argument: any) => {\r\n                    props.children.props.onChange(...argument);\r\n                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                        props.onChange(...argument);\r\n                    }\r\n                }\r\n            }\r\n        }}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * 可拖动的树\r\n */\r\nclass DraggableTree extends React.Component<{\r\n    controlsAttrs?: IControlsAttrs[];\r\n    onChange?: (v?: IControlsAttrs[]) => void\r\n}> {\r\n    constructor(argument: any) {\r\n        super(argument);\r\n        // this.state = {\r\n        //     treeData: (this.props.controlsAttrs ?? []).filter(c => c.belongTo == \"window\").map(c => {\r\n        //         if (c.name.split(\"_\")[0] == \"detailTable\") {\r\n        //             return {\r\n        //                 title: c.describe,\r\n        //                 key: c.name,\r\n        //                 children: this.props.controlsAttrs?.filter(cc => cc.belongTo == c.name && cc.name.split(\"_\")[0] != \"detailTable\").map(c => ({\r\n        //                     title: c.describe,\r\n        //                     key: c.name\r\n        //                 }))\r\n        //             };\r\n        //         }\r\n        //         else return {\r\n        //             title: c.describe,\r\n        //             key: c.name\r\n        //         };\r\n        //     }),\r\n        //     expandedKeys: (this.props.controlsAttrs ?? []).filter(c => c.belongTo == \"window\" && c.name.split(\"_\")[0] == \"detailTable\").map(c => c.name),\r\n        // };\r\n    }\r\n    onDragEnter = (info: any) => {\r\n        // console.log(info);\r\n        // expandedKeys 需要受控时设置\r\n        // this.setState({\r\n        //   expandedKeys: info.expandedKeys,\r\n        // });\r\n    };\r\n\r\n    onDrop = (info: any) => {\r\n        // if ((this.props.controlsAttrs?.find(c => c.name == info.dragNode.key)?.belongTo != \"window\"  && this.props.controlsAttrs?.find(c => c.name == info.node.key)?.belongTo == \"window\")\r\n        //     || (this.props.controlsAttrs?.find(c => c.name == info.dragNode.key)?.belongTo == \"window\" && this.props.controlsAttrs?.find(c => c.name == info.node.key)?.belongTo != \"window\")) {\r\n        //     console.warn(\"不能改变控件的归属\");\r\n        // }\r\n        if ((this.props.controlsAttrs?.find(c => c.name == info.dragNode.key)?.tableField && !this.props.controlsAttrs?.find(c => c.name == info.node.key)?.tableField)\r\n            || (!this.props.controlsAttrs?.find(c => c.name == info.dragNode.key)?.tableField && this.props.controlsAttrs?.find(c => c.name == info.node.key)?.tableField)) {\r\n            console.warn(\"不能改变控件的归属\");\r\n        }\r\n        else {\r\n            if (this.props.onChange && typeof this.props.onChange === \"function\") {\r\n                let attr: any = this.props.controlsAttrs?.find(cc => cc.name == info.dragNode.key);//获取属性\r\n                let index: number = this.props.controlsAttrs?.findIndex(cc => cc.name == info.dragNode.key) ?? 0;//获取之前位置\r\n                // if (this.props.controlsAttrs?.find(c => c.name == info.dragNode.key)?.belongTo == \"window\") {//移动主表字段位置\r\n                if (!this.props.controlsAttrs?.find(c => c.name == info.dragNode.key)?.tableField) {//移动主表字段位置\r\n                    if (info.dropPosition < 0) {\r\n                        this.props.controlsAttrs?.splice(index, 1);//将拖动的属性删除\r\n                        this.props.controlsAttrs?.unshift(attr);\r\n                    }\r\n                    // else if (info.dropPosition > (this.props.controlsAttrs ?? []).filter(c => c.belongTo == \"window\").length - 1) {\r\n                    //     this.props.controlsAttrs.splice(index, 1);//将拖动的属性删除\r\n                    //     this.props.controlsAttrs.push(attr);\r\n                    // }\r\n                    else {\r\n                        // let targetName = this.props.controlsAttrs?.filter(cc => cc.belongTo == \"window\")[info.dropPosition - 1].name;\r\n                        let targetName = this.props.controlsAttrs?.filter(cc => !cc.tableField)[info.dropPosition - 1].name;\r\n                        let targetIndex = this.props.controlsAttrs?.findIndex(cc => cc.name == targetName);//获取目标位置\r\n                        // let tableFieldsLength = this.props.controlsAttrs?.slice(0, targetIndex??0 + 1).filter(cc => cc.belongTo != \"window\").length;//获取之前位置前面表格字段个数\r\n                        let tableFieldsLength = this.props.controlsAttrs?.slice(0, targetIndex ?? 0 + 1).filter(cc => cc.tableField).length;//获取之前位置前面表格字段个数\r\n                        // console.log(index, tableFieldsLength);\r\n                        this.props.controlsAttrs?.splice(info.dropPosition + tableFieldsLength, 0, attr);\r\n                        this.props.controlsAttrs?.splice(info.dropPosition + tableFieldsLength < index ? index + 1 : index, 1);//将拖动的属性删除\r\n                    }\r\n\r\n                }\r\n                else {//移动明细表字段位置\r\n                    let detailTableName = this.props.controlsAttrs?.find(c => c.name == info.dragNode.key)?.belongTo;\r\n                    if (this.props.controlsAttrs?.find(c => c.name == info.node.key)?.belongTo != detailTableName) {//如果node是自己（dragNode）的父元素，那么就放在node里面第一个\r\n                        //获取明细表所有字段\r\n                        let detailTableFields: any = this.props.controlsAttrs?.filter(cc => cc.belongTo == detailTableName);\r\n                        //获取表第一个字段位置\r\n                        let firstFieldIndex: number = this.props.controlsAttrs?.findIndex(cc => cc.name == detailTableFields[0].name) ?? 0;//获取之前位置\r\n                        // if (this.props.controlsAttrs?.filter(cc => cc.belongTo == \"window\").findIndex(cc => cc.name == detailTableName) == info.dropPosition) {\r\n                        this.props.controlsAttrs?.splice(index, 1);//将拖动的属性删除\r\n                        this.props.controlsAttrs?.splice(firstFieldIndex, 0, attr);\r\n                        // }\r\n                    }\r\n                    else {//如果node和自己（dragNode）的是同一级的元素，那么就放在node前面dropPosition位置\r\n                        let targetName = this.props.controlsAttrs?.filter(cc => cc.belongTo == detailTableName)[info.dropPosition - 1].name;\r\n                        let targetIndex = this.props.controlsAttrs?.findIndex(cc => cc.name == targetName) ?? 0;//获取目标位置\r\n                        let tableFieldsLength = this.props.controlsAttrs?.slice(0, targetIndex + 1).filter(cc => cc.belongTo != detailTableName).length;//获取之前位置前面表格字段个数\r\n                        // console.log(index, tableFieldsLength);\r\n                        this.props.controlsAttrs?.splice(info.dropPosition + tableFieldsLength, 0, attr);\r\n                        this.props.controlsAttrs?.splice(info.dropPosition + tableFieldsLength < index ? index + 1 : index, 1);//将拖动的属性删除\r\n                    }\r\n                }\r\n                this.props.onChange(this.props.controlsAttrs ? [...this.props.controlsAttrs] : this.props.controlsAttrs);\r\n            }\r\n        }\r\n    };\r\n    render() {\r\n        return (\r\n            <Tree\r\n                selectable={false}\r\n                className=\"draggable-tree\"\r\n                // defaultExpandedKeys={(this.props.controlsAttrs ?? []).filter(c => c.belongTo == \"window\" && c.name.split(\"_\")[0] == \"detailTable\").map(c => c.name)}\r\n                defaultExpandedKeys={(this.props.controlsAttrs ?? []).filter(c => !c.tableField && c.name.split(\"_\")[0] == \"detailTable\").map(c => c.name)}\r\n                draggable\r\n                blockNode\r\n                onDragEnter={this.onDragEnter}\r\n                onDrop={this.onDrop}\r\n                // treeData={(this.props.controlsAttrs ?? []).filter(c => c.belongTo == \"window\").map(c => {\r\n                treeData={(this.props.controlsAttrs ?? []).filter(c => !c.tableField).map(c => {\r\n                    if (c.name.split(\"_\")[0] == \"detailTable\") {\r\n                        return {\r\n                            title: c.describe,\r\n                            key: c.name,\r\n                            children: this.props.controlsAttrs?.filter(cc => cc.belongTo == c.name && cc.tableField).map(c => ({//&& cc.name.split(\"_\")[0] != \"detailTable\"\r\n                                title: c.describe,\r\n                                key: c.name\r\n                            }))\r\n                        };\r\n                    }\r\n                    else return {\r\n                        title: c.describe,\r\n                        key: c.name\r\n                    };\r\n                })}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 属性设置面板\r\n * @param {*} props \r\n * @param {*[见index]} props.controlAttrs 当前控件属性\r\n * @param {*[见index]} props.controlsAttrs 所有控件属性\r\n * @param {HTMLElement} props.controlElement 当前点击的控件对象\r\n * @param {*[见index]} props.macroControlsConfig 宏控件配置\r\n * @param {({[key]:[value]})=>void} props.onValuesChange 当属性设置发生改变时事件\r\n * @returns \r\n */\r\nconst Setting: React.FC<{\r\n    controlAttrs?: IControlsAttrs;\r\n    controlsAttrs: IControlsAttrs[];\r\n    controlElement?: HTMLSpanElement;\r\n    macroControlsConfig: MacroControlsConfig[];\r\n    onValuesChange?: (v: { [key: string]: any }) => void;\r\n    onControlsAttrsChange: (v?: IControlsAttrs[]) => void\r\n}> = (props) => {\r\n    const formRef: any = React.createRef();\r\n    const [settingPanel, setSettingPanel] = useState(\"attrs\");\r\n    useEffect(() => {\r\n        if (props.controlElement && props.controlAttrs && settingPanel == \"attrs\") {\r\n            formRef.current.setFieldsValue({\r\n                ...props.controlAttrs,\r\n                text: props.controlAttrs.text,\r\n                ...props.controlAttrs.name.split(\"_\")[0] == \"detailTable\" ? { fieldTR: props.controlAttrs.fieldTR != undefined && props.controlAttrs.fieldTR.getAttribute(\"detail-field\") != null } : {}\r\n            });\r\n        }\r\n    }, [props.controlAttrs, props.controlElement, settingPanel]);\r\n    const MacroControlsConfig = useMemo(() => {\r\n        let configComponent: any = props.macroControlsConfig.find(c => props.controlAttrs && c.name == props.controlAttrs.controlType)?.configComponent;\r\n        if (!configComponent) return;\r\n        return {\r\n            ...configComponent,\r\n            props: {\r\n                ...configComponent.props,\r\n                children: {\r\n                    ...configComponent.props.children,\r\n                    props: {\r\n                        ...configComponent.props.children.props,\r\n                        controlAttrs: props.controlAttrs\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }, [props.macroControlsConfig]);\r\n    return <>\r\n        {settingPanel == \"attrs\" ? <Sider theme=\"light\" width={300} trigger={null} collapsible collapsed={false}>\r\n            <Card size=\"small\" title=\"属性\" bodyStyle={{ height: \"calc(100vh - 152px)\" }} >\r\n                {props.controlElement && props.controlAttrs\r\n                    && props.controlAttrs.name.split(\"_\")[0] != \"detailTable\"\r\n                    && props.controlAttrs.name.split(\"_\")[0] != \"image\" && props.controlAttrs.name.split(\"_\")[0] != \"file\"\r\n                    ? <Form\r\n                        ref={formRef}\r\n                        size=\"small\"\r\n                        labelCol={{ span: 6 }}\r\n                        wrapperCol={{ span: 18 }}\r\n                        labelAlign=\"left\"\r\n                        onValuesChange={(values) => {\r\n                            if (props.onValuesChange && typeof props.onValuesChange === \"function\") {\r\n                                //如果是宏控件并且宏控件发生了改变，那么他对应的配置也应该清空\r\n                                props.onValuesChange({\r\n                                    ...props.controlAttrs,\r\n                                    ...values,\r\n                                    ...values.controlType ? { macroConfig: undefined } : {},\r\n                                    ...values.dataType ? { format: undefined } : {}\r\n                                });\r\n                            }\r\n                        }}\r\n                    >\r\n                        {/* 文本 */}\r\n                        <Form.Item name=\"name\" label=\"控件名称\" style={{ marginBottom: 2 }} >\r\n                            <Input disabled />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"border\" label=\"边框\" tooltip=\"鼠标移至字母处显示提示语\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Checkbox.Group options={[\r\n                                    { label: <Tooltip title=\"上边框\">T</Tooltip>, value: 'top' },\r\n                                    { label: <Tooltip title=\"右边框\">R</Tooltip>, value: 'right' },\r\n                                    { label: <Tooltip title=\"下边框\">B</Tooltip>, value: 'bottom' },\r\n                                    { label: <Tooltip title=\"左边框\">L</Tooltip>, value: 'left' },\r\n                                ]} onChange={(v) => {\r\n                                    if (!props.controlElement) return;\r\n                                    props.controlElement.style.border = \"none\";\r\n                                    if (v.includes(\"top\")) {\r\n                                        props.controlElement.style.borderTop = \"1px solid #333\";\r\n                                    }\r\n                                    if (v.includes(\"right\")) {\r\n                                        props.controlElement.style.borderRight = \"1px solid #333\";\r\n                                    }\r\n                                    if (v.includes(\"bottom\")) {\r\n                                        props.controlElement.style.borderBottom = \"1px solid #333\";\r\n                                    }\r\n                                    if (v.includes(\"left\")) {\r\n                                        props.controlElement.style.borderLeft = \"1px solid #333\";\r\n                                    }\r\n                                }} />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"describe\" label=\"描述名称\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Input onChange={(e) => {\r\n                                    if (!props.controlElement) return;\r\n                                    props.controlElement.innerHTML = e.target.value;\r\n                                }} />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"input\" || props.controlAttrs.name.split(\"_\")[0] == \"richInput\" ? <Form.Item name=\"text\" label=\"默认文本\" style={{ marginBottom: 2 }}>\r\n                            <Input />\r\n                        </Form.Item> : null}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"input\" || props.controlAttrs.name.split(\"_\")[0] == \"compute\" ? <Form.Item name=\"dataType\" label=\"数据类型\" style={{ marginBottom: 2 }}>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '文本', value: 'text' },\r\n                                    { label: '整数', value: 'integer' },\r\n                                    { label: '小数', value: 'decimal' },\r\n                                    ...props.controlAttrs.name.split(\"_\")[0] == \"input\" ? [{ label: '时间', value: 'datetime' }] : [],\r\n                                ]}\r\n                                optionType=\"button\"\r\n                            />\r\n                        </Form.Item> : null}\r\n                        {(props.controlAttrs.name.split(\"_\")[0] == \"input\" || props.controlAttrs.name.split(\"_\")[0] == \"compute\") && props.controlAttrs.dataType == \"integer\" ? <Form.Item name=\"format\" label=\"格式化\" style={{ marginBottom: 2 }}>\r\n                            <Select>\r\n                                <Select.Option value=\"#,###\">#,###</Select.Option>\r\n                                <Select.Option value=\"#\">#</Select.Option>\r\n                            </Select>\r\n                        </Form.Item> : null}\r\n                        {(props.controlAttrs.name.split(\"_\")[0] == \"input\" || props.controlAttrs.name.split(\"_\")[0] == \"compute\") && props.controlAttrs.dataType == \"decimal\" ? <Form.Item name=\"format\" label=\"格式化\" style={{ marginBottom: 2 }}>\r\n                            <Select>\r\n                                <Select.Option value=\"#.#\">#.#</Select.Option>\r\n                                <Select.Option value=\"#.##\">#.##</Select.Option>\r\n                                <Select.Option value=\"#.###\">#.###</Select.Option>\r\n                                <Select.Option value=\"#.####\">#.####</Select.Option>\r\n                                <Select.Option value=\"#.*\">#.####</Select.Option>\r\n                                <Select.Option value=\"#,###.#\">#,###.#</Select.Option>\r\n                                <Select.Option value=\"#,###.##\">#,###.##</Select.Option>\r\n                                <Select.Option value=\"#,###.###\">#,###.###</Select.Option>\r\n                                <Select.Option value=\"#,###.####\">#,###.####</Select.Option>\r\n                                <Select.Option value=\"#,###.*\">#,###.*</Select.Option>\r\n                            </Select>\r\n                        </Form.Item> : null}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"input\" && props.controlAttrs.dataType == \"datetime\" ? <Form.Item name=\"picker\" label=\"时间类型\" style={{ marginBottom: 2 }}>\r\n                            <Select>\r\n                                <Select.Option value=\"date\">日期</Select.Option>\r\n                                <Select.Option value=\"week\">周</Select.Option>\r\n                                <Select.Option value=\"month\">月</Select.Option>\r\n                                <Select.Option value=\"quarter\">季度</Select.Option>\r\n                                <Select.Option value=\"year\">年</Select.Option>\r\n                            </Select>\r\n                        </Form.Item> : null}\r\n                        {(props.controlAttrs.name.split(\"_\")[0] == \"input\" || props.controlAttrs.name.split(\"_\")[0] == \"compute\") && props.controlAttrs.dataType == \"datetime\" ? <Form.Item name=\"format\" label=\"格式化\" style={{ marginBottom: 2 }}>\r\n                            <Input />\r\n                        </Form.Item> : null}\r\n                        {(props.controlAttrs.name.split(\"_\")[0] == \"input\" && props.controlAttrs.dataType == \"text\") || (props.controlAttrs.name.split(\"_\")[0] == \"compute\" && props.controlAttrs.dataType == \"text\") || props.controlAttrs.name.split(\"_\")[0] == \"richInput\" ? <Form.Item name=\"regular\" label=\"正则验证\" style={{ marginBottom: 2 }}>\r\n                            <Input />\r\n                        </Form.Item> : null}\r\n                        <Form.Item name=\"autoWidth\" label=\"适宽\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Radio.Group\r\n                                    options={[\r\n                                        { label: '否', value: false },\r\n                                        { label: '是', value: true },\r\n                                    ]}\r\n                                    optionType=\"button\"\r\n                                    onChange={(e) => {\r\n                                        if (!props.controlElement || !props.controlAttrs) return;\r\n                                        if (e.target.value) props.controlElement.style.width = \"100%\";\r\n                                        else props.controlElement.style.width = props.controlAttrs.width + \"px\";\r\n                                    }}\r\n                                />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"width\" label=\"宽度\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <InputNumber onChange={(v) => {\r\n                                    if (!props.controlElement || !props.controlAttrs) return;\r\n                                    if (v) props.controlElement.style.width = v + \"px\";\r\n                                    else props.controlElement.style.width = props.controlAttrs.width + \"px\";\r\n                                }} disabled={props.controlAttrs.autoWidth} />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"height\" label=\"高度\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <InputNumber onChange={(v) => {\r\n                                    if (!props.controlElement || !props.controlAttrs) return;\r\n                                    if (v) props.controlElement.style.height = v + \"px\";\r\n                                    else props.controlElement.style.height = props.controlAttrs.height + \"px\";\r\n                                }} />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"align\" label=\"对齐方式\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Radio.Group\r\n                                    options={[\r\n                                        { label: <AlignLeftOutlined />, value: 'left' },\r\n                                        { label: <AlignCenterOutlined />, value: 'center' },\r\n                                        { label: <AlignRightOutlined />, value: 'right' },\r\n                                    ]}\r\n                                    optionType=\"button\"\r\n                                    onChange={(e) => {\r\n                                        if (!props.controlElement) return;\r\n                                        props.controlElement.style.setProperty(\"text-align\", e.target.value, \"important\");\r\n                                    }}\r\n                                />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"bold\" label=\"加粗\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Radio.Group\r\n                                    options={[\r\n                                        { label: '否', value: false },\r\n                                        { label: '是', value: true },\r\n                                    ]}\r\n                                    optionType=\"button\"\r\n                                    onChange={(e) => {\r\n                                        if (!props.controlElement) return;\r\n                                        if (e.target.value) props.controlElement.style.setProperty(\"font-weight\", \"600\", \"important\");\r\n                                        else props.controlElement.style.removeProperty(\"font-weight\");\r\n                                    }}\r\n                                />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"italic\" label=\"斜体\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Radio.Group\r\n                                    options={[\r\n                                        { label: '否', value: false },\r\n                                        { label: '是', value: true },\r\n                                    ]}\r\n                                    optionType=\"button\"\r\n                                    onChange={(e) => {\r\n                                        if (!props.controlElement) return;\r\n                                        if (e.target.value) props.controlElement.style.setProperty(\"font-style\", \"italic\", \"important\");\r\n                                        else props.controlElement.style.removeProperty(\"font-style\");\r\n                                    }}\r\n                                />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"color\" label=\"颜色\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <ColorSelect onChange={v => {\r\n                                    if (!props.controlElement) return;\r\n                                    props.controlElement.style.setProperty(\"color\", v, \"important\");\r\n                                }} />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"fontFamily\" label=\"字体\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Select onChange={(v: string) => {\r\n                                    if (!props.controlElement) return;\r\n                                    props.controlElement.style.setProperty(\"font-family\", v, \"important\");\r\n                                }}>\r\n                                    <Select.Option value=\"微软雅黑\">微软雅黑</Select.Option>\r\n                                    <Select.Option value=\"宋体\">宋体</Select.Option>\r\n                                </Select>\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"fontSize\" label=\"字号(px)\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <InputNumber onChange={(v) => {\r\n                                    if (!props.controlElement) return;\r\n                                    if (v) props.controlElement.style.setProperty(\"font-size\", v + \"px\", \"important\");\r\n                                    else props.controlElement.style.removeProperty(\"font-size\");\r\n                                }} />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                        {/* 富文本 */}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"richInput\" ? <Form.Item name=\"editControl\" label=\"编辑控件\" style={{ marginBottom: 2 }}>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '文本框', value: 'textarea' },\r\n                                    { label: '编辑器', value: 'editor' },\r\n                                ]}\r\n                                optionType=\"button\"\r\n                            />\r\n                        </Form.Item> : null}\r\n                        {/* 下拉选择器 */}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"listBox\" || props.controlAttrs.name.split(\"_\")[0] == \"radio\" || props.controlAttrs.name.split(\"_\")[0] == \"checkBox\" ? <Form.Item name=\"options\" label=\"选项\" style={{ marginBottom: 2 }}>\r\n                            <OptionSelect mode={props.controlAttrs.name.split(\"_\")[0] == \"checkBox\" || (props.controlAttrs.name.split(\"_\")[0] == \"listBox\" && props.controlAttrs.multiple) ? \"multiple\" : undefined} />\r\n                        </Form.Item> : null}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"listBox\" ? <Form.Item name=\"multiple\" label=\"多选\" style={{ marginBottom: 2 }}>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '否', value: false },\r\n                                    { label: '是', value: true },\r\n                                ]}\r\n                                optionType=\"button\"\r\n                            />\r\n                        </Form.Item> : null}\r\n                        {/* 单选、多选 */}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"radio\" || props.controlAttrs.name.split(\"_\")[0] == \"checkBox\" ? <Form.Item name=\"layout\" label=\"展示\" style={{ marginBottom: 2 }}>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '横排', value: 'horizontal' },\r\n                                    { label: '竖排', value: 'vertical' },\r\n                                    { label: '下拉选择器', value: 'select' },\r\n                                ]}\r\n                                optionType=\"button\"\r\n                            />\r\n                        </Form.Item> : null}\r\n                        {/* 计算控件 */}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"compute\" ? <Form.Item name=\"roundType\" label=\"进位法\" style={{ marginBottom: 2 }}>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '进一法', value: 'roundUp' },\r\n                                    { label: '四舍五入法', value: 'round' },\r\n                                    { label: '去尾法', value: 'roundDown' },\r\n                                ]}\r\n                                optionType=\"button\"\r\n                            />\r\n                        </Form.Item> : null}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"compute\" ? <Form.Item name=\"computeRule\" label=\"计算规则\" style={{ marginBottom: 2 }}>\r\n                            <ComputeRuleConfig controlName={props.controlAttrs.name} controlsAttrs={props.controlsAttrs} />\r\n                        </Form.Item> : null}\r\n                        {/* 宏控件 */}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"macro\" ? <Form.Item name=\"controlType\" label=\"控件类型\" style={{ marginBottom: 2 }}>\r\n                            <Select>\r\n                                {props.macroControlsConfig.map((c, i) => <Select.Option key={i} value={c.name}>{c.name}</Select.Option>)}\r\n                            </Select>\r\n                        </Form.Item> : null}\r\n                        {MacroControlsConfig}\r\n                        {/* 级联选择器 */}\r\n                        {props.controlAttrs.name.split(\"_\")[0] == \"treeListBox\" ? <Form.Item name=\"options\" label=\"选项\" style={{ marginBottom: 2 }}>\r\n                            <TreeOptionSelect />\r\n                        </Form.Item> : null}\r\n                        <Form.Item name=\"allowedModify\" label=\"允许修改\" style={{ marginBottom: 2 }}>\r\n                            <SubFormItem>\r\n                                <Radio.Group\r\n                                    options={[\r\n                                        { label: '否', value: false },\r\n                                        { label: '是', value: true },\r\n                                    ]}\r\n                                    optionType=\"button\"\r\n                                    onChange={(e) => {\r\n                                        if (!props.controlElement) return;\r\n                                        if (e.target.value) props.controlElement.removeAttribute(\"disabled\");\r\n                                        else props.controlElement.setAttribute(\"disabled\", \"disabled\");\r\n                                    }}\r\n                                />\r\n                            </SubFormItem>\r\n                        </Form.Item>\r\n                    </Form> : null}\r\n                {props.controlElement && props.controlAttrs && props.controlAttrs.name.split(\"_\")[0] == \"detailTable\" ? <Form\r\n                    ref={formRef}\r\n                    size=\"small\"\r\n                    labelCol={{ span: 6 }}\r\n                    wrapperCol={{ span: 18 }}\r\n                    labelAlign=\"left\"\r\n                    onValuesChange={(values) => {\r\n                        if (props.onValuesChange && typeof props.onValuesChange === \"function\") {\r\n                            props.onValuesChange({ ...props.controlAttrs, ...values });\r\n                        }\r\n                    }}\r\n                >\r\n                    {/* 文本 */}\r\n                    <Form.Item name=\"name\" label=\"控件名称\" style={{ marginBottom: 2 }} >\r\n                        <Input disabled />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"describe\" label=\"描述名称\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <Input onChange={(e) => {\r\n                                if (!props.controlElement) return;\r\n                                props.controlElement.setAttribute(\"title\", e.target.value);\r\n                            }} />\r\n                        </SubFormItem>\r\n                    </Form.Item>\r\n                    {props.controlAttrs.fieldTR != undefined ? <Form.Item name=\"fieldTR\" label=\"录入行\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '否', value: false },\r\n                                    { label: '是', value: true },\r\n                                ]}\r\n                                optionType=\"button\"\r\n                                onChange={(e) => {\r\n                                    if (!props.controlElement || !props.controlAttrs) return;\r\n                                    if (e.target.value) {\r\n\r\n                                        //先将此表格所有的行全部清除背景\r\n                                        let trs = props.controlElement.getElementsByTagName(\"tr\");\r\n                                        for (let i = 0; i < trs.length; i++) {\r\n                                            trs[i].removeAttribute(\"detail-field\");\r\n                                        }\r\n                                        //再设置当前行\r\n                                        if (props.controlAttrs.fieldTR) props.controlAttrs.fieldTR.setAttribute(\"detail-field\", \"true\");\r\n                                    }\r\n                                    else {\r\n                                        if (props.controlAttrs.fieldTR) props.controlAttrs.fieldTR.removeAttribute(\"detail-field\");\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </SubFormItem>\r\n                    </Form.Item> : null}\r\n                </Form> : null}\r\n                {props.controlElement && props.controlAttrs && (props.controlAttrs.name.split(\"_\")[0] == \"image\" || props.controlAttrs.name.split(\"_\")[0] == \"file\") ? <Form\r\n                    ref={formRef}\r\n                    size=\"small\"\r\n                    labelCol={{ span: 6 }}\r\n                    wrapperCol={{ span: 18 }}\r\n                    labelAlign=\"left\"\r\n                    onValuesChange={(values) => {\r\n                        if (props.onValuesChange && typeof props.onValuesChange === \"function\") {\r\n                            props.onValuesChange({ ...props.controlAttrs, ...values });\r\n                        }\r\n                    }}\r\n                >\r\n                    <Form.Item name=\"name\" label=\"控件名称\" style={{ marginBottom: 2 }} >\r\n                        <Input disabled />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"border\" label=\"边框\" tooltip=\"鼠标移至字母处显示提示语\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <Checkbox.Group options={[\r\n                                { label: <Tooltip title=\"上边框\">T</Tooltip>, value: 'top' },\r\n                                { label: <Tooltip title=\"右边框\">R</Tooltip>, value: 'right' },\r\n                                { label: <Tooltip title=\"下边框\">B</Tooltip>, value: 'bottom' },\r\n                                { label: <Tooltip title=\"左边框\">L</Tooltip>, value: 'left' },\r\n                            ]} onChange={(v) => {\r\n                                if (!props.controlElement) return;\r\n                                props.controlElement.style.border = \"none\";\r\n                                if (v.includes(\"top\")) {\r\n                                    props.controlElement.style.borderTop = \"1px solid #333\";\r\n                                }\r\n                                if (v.includes(\"right\")) {\r\n                                    props.controlElement.style.borderRight = \"1px solid #333\";\r\n                                }\r\n                                if (v.includes(\"bottom\")) {\r\n                                    props.controlElement.style.borderBottom = \"1px solid #333\";\r\n                                }\r\n                                if (v.includes(\"left\")) {\r\n                                    props.controlElement.style.borderLeft = \"1px solid #333\";\r\n                                }\r\n                            }} />\r\n                        </SubFormItem>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"describe\" label=\"描述名称\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <Input onChange={(e) => {\r\n                                if (!props.controlElement) return;\r\n                                props.controlElement.setAttribute(\"title\", e.target.value);\r\n                            }} />\r\n                        </SubFormItem>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"autoWidth\" label=\"适宽\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '否', value: false },\r\n                                    { label: '是', value: true },\r\n                                ]}\r\n                                optionType=\"button\"\r\n                                onChange={(e) => {\r\n                                    if (!props.controlElement || !props.controlAttrs) return;\r\n                                    if (e.target.value) props.controlElement.style.width = \"100%\";\r\n                                    else props.controlElement.style.width = props.controlAttrs.width + \"px\";\r\n                                }}\r\n                            />\r\n                        </SubFormItem>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"width\" label=\"宽度\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <InputNumber onChange={(v) => {\r\n                                if (!props.controlElement || !props.controlAttrs) return;\r\n                                if (v) props.controlElement.style.width = v + \"px\";\r\n                                else props.controlElement.style.width = props.controlAttrs.width + \"px\";\r\n                            }} disabled={props.controlAttrs.autoWidth} />\r\n                        </SubFormItem>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"height\" label=\"高度\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <InputNumber onChange={(v) => {\r\n                                if (!props.controlElement || !props.controlAttrs) return;\r\n                                if (v) props.controlElement.style.height = v + \"px\";\r\n                                else props.controlElement.style.height = props.controlAttrs.height + \"px\";\r\n                            }} />\r\n                        </SubFormItem>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"allowedModify\" label=\"允许修改\" style={{ marginBottom: 2 }}>\r\n                        <SubFormItem>\r\n                            <Radio.Group\r\n                                options={[\r\n                                    { label: '否', value: false },\r\n                                    { label: '是', value: true },\r\n                                ]}\r\n                                optionType=\"button\"\r\n                                onChange={(e) => {\r\n                                    if (!props.controlElement) return;\r\n                                    if (e.target.value) props.controlElement.removeAttribute(\"disabled\");\r\n                                    else props.controlElement.setAttribute(\"disabled\", \"disabled\");\r\n                                }}\r\n                            />\r\n                        </SubFormItem>\r\n                    </Form.Item>\r\n                </Form> : null}\r\n            </Card>\r\n        </Sider> : null}\r\n        {settingPanel == \"fields\" ? <Sider theme=\"light\" width={300} trigger={null} collapsible collapsed={false}>\r\n            <Card size=\"small\" title=\"字段\" bodyStyle={{ height: \"calc(100vh - 152px)\", overflowX: \"hidden\" }} >\r\n                <DraggableTree onChange={(controlsAttrs) => {\r\n                    if (props.onControlsAttrsChange && typeof props.onControlsAttrsChange === \"function\") {\r\n                        //如果是宏控件并且宏控件发生了改变，那么他对应的配置也应该清空\r\n                        props.onControlsAttrsChange(controlsAttrs);\r\n                    }\r\n                }} controlsAttrs={props.controlsAttrs} />\r\n            </Card>\r\n        </Sider> : null}\r\n        <Sider collapsedWidth={40} theme=\"light\" trigger={null} collapsible collapsed={true} style={{ height: \"calc(100vh - 112px)\" }}>\r\n            <Menu mode=\"inline\" selectedKeys={[]} style={{ height: \"100%\" }}>\r\n                <Menu.Item key=\"attrs\" icon={<ControlOutlined />} onClick={() => setSettingPanel(\"attrs\")}>\r\n                    属性\r\n                </Menu.Item>\r\n                <Menu.Item key=\"fields\" icon={<OrderedListOutlined />} onClick={() => setSettingPanel(\"fields\")}>\r\n                    字段\r\n                </Menu.Item>\r\n                {/* <Menu.Item key=\"help\" icon={<InfoCircleOutlined />}>\r\n                    帮助\r\n                </Menu.Item> */}\r\n            </Menu>\r\n        </Sider>\r\n    </>\r\n}\r\nexport default Setting;","/**\r\n * 判断组件归属\r\n * @param {*} el \r\n * @returns \r\n */\r\nexport function getControlBelongTo(el: Element) {\r\n    var parentElement = el.parentElement;\r\n    while (parentElement) {\r\n        if (parentElement.tagName === 'BODY') {\r\n            return 'window';\r\n        }\r\n        if (parentElement.className === 'mceTmpl') {\r\n            return parentElement.id;\r\n        }\r\n        parentElement = parentElement.parentElement;\r\n    }\r\n}\r\n/**\r\n * 获取上级组件\r\n * @param {*} el \r\n * @returns \r\n */\r\nexport function getParentControl(el: HTMLSpanElement) {\r\n    var parentElement = el.parentElement;\r\n    while (parentElement) {\r\n        if (parentElement.tagName === 'BODY') {\r\n            return undefined;\r\n        }\r\n        if (parentElement.className === 'mceTmpl') {\r\n            return parentElement;\r\n        }\r\n        parentElement = parentElement.parentElement;\r\n    }\r\n}\r\n\r\n/**\r\n * 从HTMLCollection中输出所有控件的id\r\n * @param {*} HTMLCollection \r\n */\r\nexport function getIdsFromHTMLCollection(HTMLCollection: HTMLCollectionOf<Element>) {\r\n    let ids = [];\r\n    for (let i = 0; i < HTMLCollection.length; i++) {\r\n        ids.push(HTMLCollection[i].id);\r\n    }\r\n    return ids;\r\n}\r\n\r\n/**\r\n * 获取组件上级元素是否存在TR且有属性有detail-field=\"true\"\r\n * @param {*} el \r\n * @returns \r\n */\r\nexport function getParentDetailTableFieldTr(el: HTMLSpanElement) {\r\n    var parentElement = el.parentElement;\r\n    while (parentElement) {\r\n        if (parentElement.tagName === 'BODY') {\r\n            return undefined;\r\n        }\r\n        if (parentElement.tagName === \"TR\" && parentElement.getAttribute(\"detail-field\")) {\r\n            return parentElement;\r\n        }\r\n        parentElement = parentElement.parentElement;\r\n    }\r\n}","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport { useEffect, useRef } from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport { getControlBelongTo, getParentControl } from '../utils/utils';\r\n\r\nconst { Content } = Layout;\r\n/**\r\n * 设计面板\r\n * @param {*} props \r\n * @param {String} props.controlType\r\n * @param {(control:HTMLElement, srcElement:HTMLElement)=>void} props.onControlSelect\r\n * @param {(htmlStr:String, controlIds:{belongTo:String;name:String})=>void} props.onEditorChange\r\n * @returns \r\n */\r\nconst DesignerBoard: React.FC<{\r\n    controlType?: string;\r\n    onControlSelect?: (control?: HTMLSpanElement, srcElement?: HTMLTableRowElement) => void;\r\n    onEditorChange?: (htmlStr: string, controlIds: { belongTo?: string; name: string }[]) => void\r\n}> = (props) => {\r\n    const editorRef: any = useRef(null);//编辑器ref对象\r\n    //添加控件\r\n    useEffect(() => {\r\n        if (props.controlType) {\r\n            switch (props.controlType.split(\"_\")[0]) {\r\n                case \"input\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:22px;\" contenteditable=\"false\">文本框</control>');\r\n                    break;\r\n                case \"richInput\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:150px;height:100px;\" contenteditable=\"false\">多行文本框</control>');\r\n                    break;\r\n                case \"radio\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:22px;\" contenteditable=\"false\">单选</control>');\r\n                    break;\r\n                case \"checkBox\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:22px;\" contenteditable=\"false\">复选</control>');\r\n                    break;\r\n                case \"listBox\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:22px;\" contenteditable=\"false\">下拉选择器</control>');\r\n                    break;\r\n                case \"compute\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:22px;\" contenteditable=\"false\">计算控件</control>');\r\n                    break;\r\n                case \"macro\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:22px;\" contenteditable=\"false\" disabled=\"disabled\">宏控件</control>');\r\n                    break;\r\n                case \"detailTable\": editorRef.current.editor.execCommand('mceInsertContent', false, '<table id=\"' + props.controlType + '\" style=\"font-size:16px;\" class=\"mceTmpl\" width=\"100%\" data-field=\"detail-table\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\"><tr><th scope=\"col\"> </th><th scope=\"col\"> </th></tr><tr><td> </td><td> </td></tr></table>');\r\n                    break;\r\n                case \"treeListBox\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:22px;\" contenteditable=\"false\">级联选择器</control>');\r\n                    break;\r\n                case \"image\": editorRef.current.editor.execCommand('mceInsertContent', false, '<control id=\"' + props.controlType + '\" class=\"mceTmpl\" style=\"width:100px;height:100px;\" contenteditable=\"false\">图片</control>');\r\n                    break;\r\n            }\r\n        }\r\n    }, [props.controlType]);\r\n    return <Content\r\n        style={{\r\n            minHeight: 280,\r\n            height: \"calc(100vh - 65px)\",\r\n            overflow: \"auto\",\r\n            textAlign: \"center\",\r\n            boxSizing: \"border-box\"\r\n        }}\r\n    >\r\n        <Editor\r\n            ref={editorRef}\r\n            apiKey=\"m3zkfg08keg9n2obr4mi4uqn81y0utl31lgi3m39tr5e5ssm\"\r\n            init={{\r\n                height: document.body.clientHeight - 65,\r\n                plugins: 'print preview importcss tinydrive searchreplace autolink autosave save directionality visualblocks visualchars fullscreen image link media codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons',\r\n                // plugins: 'print preview powerpaste casechange importcss tinydrive searchreplace autolink autosave save directionality advcode visualblocks visualchars fullscreen image link media mediaembed codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists checklist wordcount tinymcespellchecker a11ychecker imagetools textpattern noneditable help formatpainter permanentpen pageembed charmap tinycomments mentions linkchecker emoticons advtable export',\r\n                // mobile: {\r\n                //     plugins: 'print preview powerpaste casechange importcss tinydrive searchreplace autolink autosave save directionality advcode visualblocks visualchars fullscreen image link media mediaembed template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists checklist wordcount tinymcespellchecker a11ychecker textpattern noneditable help formatpainter pageembed charmap mentions quickbars linkchecker emoticons advtable'\r\n                // },\r\n                contextmenu: \"\",\r\n                menu: {//自定义菜单，比如将评论拿出来\r\n                    tc: {\r\n                        title: 'TinyComments',\r\n                        items: 'addcomment showcomments deleteallconversations'\r\n                    }\r\n                },\r\n                menubar: 'file edit view insert format tools table tc help',\r\n                // toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment',\r\n                toolbar: ' undo redo | bold italic | forecolor backcolor | template codesample | alignleft aligncenter alignright alignjustify | bullist numlist | link image insertfile tinydrive',\r\n                // autosave_ask_before_unload: true,//开启自动保存\r\n                // autosave_interval: '30s',//自动保存间隔时间\r\n                // autosave_prefix: '{path}{query}-{id}-',//自动保存链接\r\n                // autosave_restore_when_empty: false,\r\n                // autosave_retention: '2m',\r\n                // image_advtab: true,\r\n                // importcss_append: true,\r\n                // templates: [\r\n                //     { title: '明细子表', description: '创建一个明细表', content: '<div class=\"mceTmpl\"><table width=\"100%\" data-field=\"detail-table\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\"><tr><th scope=\"col\"> </th><th scope=\"col\"> </th></tr><tr><td> </td><td> </td></tr></table></div>' },\r\n                //     { title: '文本框', description: '创建一个文本框', content: '<span class=\"mceTmpl\" style=\"width:100px;height:22px;background-color:yellow;display:inline-block;\" contenteditable=\"false\">文本框</span>' },\r\n                //     { title: '多行文本框', description: '创建一个多行文本框', content: '<span class=\"mceTmpl\" style=\"width:200px;height:100px;background-color:yellow;display:inline-block;\" contenteditable=\"false\">多行文本框</span>' },\r\n                // ],\r\n                // template_cdate_format: '[Date Created (CDATE): %m/%d/%Y : %H:%M:%S]',\r\n                // template_mdate_format: '[Date Modified (MDATE): %m/%d/%Y : %H:%M:%S]',\r\n                // image_caption: true,\r\n                quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',//选中某些内容快速编辑\r\n                noneditable_noneditable_class: 'mceNonEditable',\r\n                // toolbar_mode: 'sliding',\r\n                // spellchecker_ignore_list: ['Ephox', 'Moxiecode'],\r\n                tinycomments_mode: 'embedded',\r\n                content_style: `html{\r\n                        background-color:#f0f2f5;\r\n                        text-align: center;\r\n                    }\r\n                    body{\r\n                        min-width:794px;\r\n                        background-color: #ffffff;\r\n                        padding:14px;\r\n                        display:inline-block;\r\n                        text-align: left;\r\n                        font-family:\"宋体\"\r\n                    }\r\n                    p{}\r\n                    .mceTmpl[disabled]{\r\n                        background: repeating-linear-gradient( \r\n                            45deg\r\n                            , rgb(0 0 0 / 30%), rgb(0 0 0 / 30%) 2px, #fff 2px, #fff 5px );\r\n                    }\r\n                    .mceTmpl tr[detail-field]{\r\n                        background: repeating-linear-gradient( \r\n                            45deg\r\n                            , rgb(76 207 134 / 30%), rgb(76 207 134 / 30%) 2px, #fff 2px, #fff 5px );\r\n                    }\r\n                    control[class='mceTmpl']{\r\n                        background-color:#f7f7f7!important;\r\n                        display:inline-block!important;\r\n                        font-size:16px!important;\r\n                        overflow: hidden!important;\r\n                        text-overflow: ellipsis!important;\r\n                        white-space: nowrap!important;\r\n                        font-weight:initial!important;\r\n                        font-style: initial!important;\r\n                        color:#000000!important;\r\n                        text-align:left!important;\r\n                        font-family:'宋体'!important;\r\n                        vertical-align: bottom;\r\n                    }\r\n                    `,\r\n                // contextmenu: 'link image imagetools table configurepermanentpen',\r\n                language: 'zh_CN',\r\n                extended_valid_elements: 'control[disabled|id|class|style|contenteditable]',//设置合法的属性（不被过滤掉）\r\n            }}\r\n            onEditorChange={(a, editor) => {\r\n                //查询所有的控件是否有被删除\r\n                let iframe: any = document.getElementsByClassName(\"tox-edit-area__iframe\"); //HTMLIFrameElement\r\n                let controls = iframe[0].contentWindow.document.getElementsByClassName('mceTmpl');\r\n                let controlsArrar = [];\r\n                for (let i = 0; i < controls.length; i++) {\r\n                    controlsArrar.push({\r\n                        belongTo: getControlBelongTo(controls[i]),\r\n                        name: controls[i].id\r\n                    });\r\n                }\r\n                if (props.onEditorChange && typeof props.onEditorChange === \"function\") {\r\n                    props.onEditorChange(a, controlsArrar);\r\n                }\r\n            }}\r\n            onInit={() => {\r\n                // let iframe = document.getElementsByClassName(\"tox-edit-area__iframe\");\r\n                // iframe[0].contentWindow.document.addEventListener(\"click\", (ev) => {\r\n                //     ev = ev || window.event;//可以打印整个ev看看\r\n                //     if (ev.srcElement.className === 'mceTmpl') {\r\n                //         // console.log(window.getComputedStyle(ev.srcElement, null));\r\n                //         if (props.onControlSelect && typeof props.onControlSelect === \"function\") {\r\n                //             props.onControlSelect(ev.srcElement, ev.srcElement);\r\n                //         }\r\n                //         return;\r\n                //     }\r\n                //     if (getParentControl(ev.srcElement) && getParentControl(ev.srcElement).className === 'mceTmpl') {\r\n                //         // console.log(window.getComputedStyle(ev.srcElement.parentElement.parentElement.parentElement, null));\r\n                //         if (props.onControlSelect && typeof props.onControlSelect === \"function\") {\r\n                //             props.onControlSelect(getParentControl(ev.srcElement), ev.srcElement);\r\n                //         }\r\n                //         return;\r\n                //     }\r\n                //     props.onControlSelect(undefined);\r\n                // });\r\n            }}\r\n            onClick={(ev: any) => {\r\n                ev = ev || window.event;//可以打印整个ev看看\r\n                if (ev.srcElement && ev.srcElement.className === 'mceTmpl') {\r\n                    if (props.onControlSelect && typeof props.onControlSelect === \"function\") {\r\n                        props.onControlSelect(ev.srcElement, ev.srcElement);\r\n                    }\r\n                    return;\r\n                }\r\n                let element = getParentControl(ev.srcElement);\r\n                if (getParentControl(ev.srcElement) && element && element.className === 'mceTmpl') {\r\n                    if (props.onControlSelect && typeof props.onControlSelect === \"function\") {\r\n                        props.onControlSelect(getParentControl(ev.srcElement), ev.srcElement);\r\n                    }\r\n                    return;\r\n                }\r\n                if (props.onControlSelect && typeof props.onControlSelect === \"function\") {\r\n                    props.onControlSelect();\r\n                }\r\n            }}\r\n        />\r\n    </Content>\r\n}\r\n\r\nexport default DesignerBoard;","import React from 'react';\r\nimport { Form, Select } from 'antd';\r\nimport { IControlsAttrs } from '../data';\r\n\r\n/**\r\n * 金额转大写配置\r\n * @param {*} props \r\n * @param {{priceField:String;precision:String;}} props.value\r\n * @param {(v:{priceField:String;precision:String;})=>void} props.onChange \r\n * @param {*[见index]} props.controlsAttrs\r\n * @returns \r\n */\r\nconst AmountInWordsConfig: React.FC<{ value?: { priceField: string; precision: string; }; onChange?: (v: { priceField?: string; precision?: string; }) => void;controlsAttrs:IControlsAttrs[] }> = (props) => {\r\n    return <>\r\n        <Form.Item label=\"金额字段\" style={{ marginBottom: 2 }}>\r\n            <Select\r\n                value={props.value ? props.value.priceField : undefined}\r\n                onChange={v => {\r\n                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                        props.onChange({\r\n                            ...props.value, priceField: v\r\n                        })\r\n                    }\r\n                }}\r\n            >\r\n                {props.controlsAttrs.filter(c => (c.name.split(\"_\")[0] == \"input\" && c.dataType != \"text\") || c.name.split(\"_\")[0] == \"compute\").map((c, i) => <Select.Option key={i} value={c.name}>{c.describe}</Select.Option>)}\r\n            </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"转换精度\" style={{ marginBottom: 2 }}>\r\n            <Select\r\n                value={props.value ? props.value.precision : undefined}\r\n                onChange={v => {\r\n                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                        props.onChange({\r\n                            ...props.value, precision: v\r\n                        })\r\n                    }\r\n                }}\r\n            >\r\n                <Select.Option value=\"圆\">圆</Select.Option>\r\n                <Select.Option value=\"角\">角</Select.Option>\r\n                <Select.Option value=\"分\">分</Select.Option>\r\n                <Select.Option value=\"厘\">厘</Select.Option>\r\n                <Select.Option value=\"毫\">毫</Select.Option>\r\n            </Select>\r\n        </Form.Item>\r\n    </>\r\n}\r\n\r\nexport default AmountInWordsConfig;","import React from 'react';\r\nimport { Form, Select, Radio } from 'antd';\r\nimport { IControlsAttrs } from '../data';\r\n\r\n/**\r\n * 宏控件——转扫描码控件\r\n * @param {*} props \r\n * @param {{transField:String;scanCodeType:String;}} props.value\r\n * @param {(v:{transField:String;scanCodeType:String;})=>void} props.onChange \r\n * @param {*[见index]} props.controlsAttrs\r\n */\r\nconst ScanCodeConfig: React.FC<{\r\n    value?: { transField?: string; scanCodeType?: string; };\r\n    onChange?: (v: { transField?: string; scanCodeType?: string; }) => void;\r\n    controlsAttrs: IControlsAttrs[];\r\n}> = (props) => {\r\n    return <>\r\n        <Form.Item label=\"转码字段\" style={{ marginBottom: 2 }}>\r\n            <Select\r\n                value={props.value ? props.value.transField : undefined}\r\n                onChange={v => {\r\n                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                        props.onChange({\r\n                            ...props.value, transField: v\r\n                        })\r\n                    }\r\n                }}\r\n            >\r\n                {props.controlsAttrs.map((c, i) => <Select.Option key={i} value={c.name}>{c.describe}</Select.Option>)}\r\n            </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"选择类型\" style={{ marginBottom: 2 }}>\r\n            <Radio.Group\r\n                value={props.value ? props.value.scanCodeType : undefined}\r\n                options={[\r\n                    { label: '条码', value: 'barcode' },\r\n                    { label: '二维码', value: 'qrcode' },\r\n                ]}\r\n                optionType=\"button\"\r\n                onChange={e => {\r\n                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                        props.onChange({\r\n                            ...props.value, scanCodeType: e.target.value\r\n                        })\r\n                    }\r\n                }}\r\n            />\r\n        </Form.Item>\r\n    </>;\r\n}\r\n\r\nexport default ScanCodeConfig;","import React, { useState } from \"react\";\r\nimport { Layout, Space, Form, Input } from \"antd\";\r\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\r\nimport LetfToolBar from \"./components/LetfToolBar\";\r\nimport Setting from \"./components/Setting\";\r\nimport DesignerBoard from \"./components/DesignerBoard\";\r\nimport \"./index.css\";\r\nimport { getIdsFromHTMLCollection, getParentDetailTableFieldTr } from './utils/utils';\r\nimport AmountInWordsConfig from './components/AmountInWordsConfig';\r\nimport ScanCodeConfig from './components/ScanCodeConfig';\r\nimport { IControlsAttrs, MacroControlsConfig } from \"./data\";\r\nimport \"antd/dist/antd.css\";\r\n\r\n\r\nconst { Header, Sider, Content } = Layout;\r\nconst FormPlus: React.FC<{\r\n    value?: {\r\n        controlsAttrs?: IControlsAttrs[],\r\n        html?: string;\r\n    }\r\n    onChange?: (v: {\r\n        controlsAttrs?: IControlsAttrs[],\r\n        html?: string;\r\n    }) => void\r\n    extra?: React.ReactNode\r\n}> = (props) => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [controlType, setControlType] = useState<string>();//当前选择的需要加入表单的组件\r\n    // const [controlsAttrs, setControlsAttrs] = useState<IControlsAttrs[]>([]);//已经添加的控件属性\r\n    const [removeControlsAttrs, setRemoveControlsAttrs] = useState<IControlsAttrs[]>([]);//已经移除的控件属性\r\n    const [controlElement, setControlElement] = useState<HTMLSpanElement>();//当前点击的控件\r\n    //宏控件配置\r\n    const macroControlsConfig: MacroControlsConfig[] = [\r\n        { name: \"当前年份\", data: {}, configComponent: <Form.Item name=\"macroConfig\" label=\"控件配置\" style={{ marginBottom: 2 }}><Input /></Form.Item> },\r\n        { name: \"当前月份\", data: {}, configComponent: <Form.Item name=\"macroConfig\" label=\"控件配置\" style={{ marginBottom: 2 }}><Input /></Form.Item> },\r\n        { name: \"当前季度\", data: {}, configComponent: <Form.Item name=\"macroConfig\" label=\"控件配置\" style={{ marginBottom: 2 }}><Input /></Form.Item> },\r\n        { name: \"当前日期\", data: {}, configComponent: <Form.Item name=\"macroConfig\" label=\"控件配置\" style={{ marginBottom: 2 }}><Input /></Form.Item> },\r\n        { name: \"当前时间\", data: {}, configComponent: <Form.Item name=\"macroConfig\" label=\"控件配置\" style={{ marginBottom: 2 }}><Input /></Form.Item> },\r\n        { name: \"流程名称\", data: {}, configComponent: <></> },\r\n        { name: \"发起人部门\", data: {}, configComponent: <></> },\r\n        { name: \"发起人职位\", data: {}, configComponent: <></> },\r\n        { name: \"发起人岗位\", data: {}, configComponent: <></> },\r\n        { name: \"当前处理人名称\", data: {}, configComponent: <></> },\r\n        { name: \"当前处理人部门\", data: {}, configComponent: <></> },\r\n        { name: \"当前处理人职位\", data: {}, configComponent: <></> },\r\n        { name: \"当前处理人岗位\", data: {}, configComponent: <></> },\r\n        { name: \"流程编号\", data: {}, configComponent: <></> },\r\n        { name: \"发起人名称\", data: {}, configComponent: <></> },\r\n        { name: \"金额大写\", data: {}, configComponent: <Form.Item name=\"macroConfig\" label=\"控件配置\" style={{ marginBottom: 2 }}><AmountInWordsConfig controlsAttrs={props.value?.controlsAttrs ?? []}></AmountInWordsConfig></Form.Item> },\r\n        { name: \"扫描码\", data: {}, configComponent: <Form.Item name=\"macroConfig\" label=\"控件配置\" style={{ marginBottom: 2 }}><ScanCodeConfig controlsAttrs={props.value?.controlsAttrs ?? []}></ScanCodeConfig></Form.Item> },\r\n    ]\r\n    return <Layout style={{ minHeight: 0, height: \"100vh\" }}>\r\n        <Sider theme=\"light\" trigger={null} collapsible collapsed={collapsed} style={{ height: \"100vh\" }}>\r\n            <div style={{\r\n                height: 32, margin: 16, background: \"#4d5c6a\", textAlign: \"center\", lineHeight: \"32px\", color: \"#fff\", fontWeight: 600\r\n            }}>表单设计器</div>\r\n            <LetfToolBar onSelected={(type: string) => {\r\n                let id = (new Date()).valueOf();\r\n                setControlType(type + \"_\" + id);\r\n                if (props.onChange && typeof props.onChange === \"function\") {\r\n                    switch (type) {\r\n                        case \"input\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    text: \"\",\r\n                                    describe: \"文本框\",\r\n                                    dataType: \"text\",\r\n                                    format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 22,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    // editControl:\"textarea\"\r\n                                    // options:undefined,\r\n                                    // multiple:false,\r\n                                    // layout:\"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\",\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"richInput\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    text: \"\",\r\n                                    describe: \"多行文本框\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 150,\r\n                                    height: 100,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    editControl: \"textarea\",\r\n                                    // options:undefined,\r\n                                    // multiple:false,\r\n                                    // layout:\"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\",\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"radio\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    // text: \"单选\",\r\n                                    describe: \"单选\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 22,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    // editControl:\"textarea\",\r\n                                    options: undefined,\r\n                                    // multiple:false,\r\n                                    layout: \"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\",\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"checkBox\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    // text: \"\",\r\n                                    describe: \"复选\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 22,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    // editControl:\"textarea\",\r\n                                    options: undefined,\r\n                                    // multiple:false,\r\n                                    layout: \"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\",\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"listBox\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    // text: \"\",\r\n                                    describe: \"下拉选择器\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 22,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    // editControl:\"textarea\",\r\n                                    options: undefined,\r\n                                    multiple: false,\r\n                                    layout: \"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\"\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"compute\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    // text: \"\",\r\n                                    describe: \"计算控件\",\r\n                                    dataType: \"integer\",\r\n                                    format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 22,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    // editControl:\"textarea\"\r\n                                    // options:undefined,\r\n                                    // multiple:false,\r\n                                    // layout:\"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    roundType: \"round\",\r\n                                    computeRule: [],\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"macro\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    // text: \"\",\r\n                                    describe: \"宏控件\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 22,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    // editControl:\"textarea\",\r\n                                    options: undefined,\r\n                                    multiple: false,\r\n                                    layout: \"horizontal\",\r\n                                    controlType: undefined,\r\n                                    allowedModify: false,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\"\r\n                                    // computeRule:undefined,\r\n                                    macroConfig: undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"detailTable\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    // border: [],\r\n                                    // text: \"\",\r\n                                    describe: \"明细表\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    // autoWidth: false,\r\n                                    // width: 100,\r\n                                    // height: 22,\r\n                                    // align: \"left\",\r\n                                    // bold: false,\r\n                                    // italic: false,\r\n                                    // color: \"#000000\",\r\n                                    // fontFamily: \"宋体\",\r\n                                    // fontSize: 16,\r\n                                    // editControl:\"textarea\"\r\n                                    // options:undefined,\r\n                                    // multiple:false,\r\n                                    // layout:\"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    // allowedModify: true,\r\n                                    fieldTR: undefined,\r\n                                    // roundType:\"round\",\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"treeListBox\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    // text: \"\",\r\n                                    describe: \"级联选择器\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 22,\r\n                                    align: \"left\",\r\n                                    bold: false,\r\n                                    italic: false,\r\n                                    color: \"#000000\",\r\n                                    fontFamily: \"宋体\",\r\n                                    fontSize: 16,\r\n                                    // editControl:\"textarea\",\r\n                                    options: undefined,\r\n                                    // multiple: false,\r\n                                    // layout: \"horizontal\",\r\n                                    // controlType:undefined,\r\n                                    allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\"\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig:undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                        case \"image\":\r\n                            props.onChange({\r\n                                html: props.value?.html,\r\n                                controlsAttrs: [...(props.value?.controlsAttrs ?? []), {\r\n                                    name: type + \"_\" + id,\r\n                                    border: [],\r\n                                    // text: \"\",\r\n                                    describe: \"图片\",\r\n                                    // dataType: \"text\",\r\n                                    // format: undefined,\r\n                                    autoWidth: false,\r\n                                    width: 100,\r\n                                    height: 100,\r\n                                    // align: \"left\",\r\n                                    // bold: false,\r\n                                    // italic: false,\r\n                                    // color: \"#000000\",\r\n                                    // fontFamily: \"宋体\",\r\n                                    // fontSize: 16,\r\n                                    // editControl:\"textarea\",\r\n                                    // options: undefined,\r\n                                    // multiple: false,\r\n                                    // layout: \"horizontal\",\r\n                                    // controlType: undefined,\r\n                                    // allowedModify: true,\r\n                                    // fieldTR: undefined,\r\n                                    // roundType:\"round\"\r\n                                    // computeRule:undefined,\r\n                                    // macroConfig: undefined,\r\n                                }]\r\n                            });\r\n                            break;\r\n                    }\r\n                }\r\n            }} />\r\n        </Sider>\r\n        <Layout className=\"site-layout\" style={{ minHeight: 0, height: \"100vh\" }}>\r\n            <Header style={{ padding: 0, backgroundColor: \"#fff\", boxShadow: \"1px 1px 4px rgb(0 21 41 / 8%)\", position: \"relative\", zIndex: 10 }}>\r\n                <div style={{ padding: \"0 24px\" }}>\r\n                    {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n                        style: {\r\n                            fontSize: 18,\r\n                            lineHeight: \"64px\",\r\n                            cursor: \"pointer\",\r\n                            transition: \"color 0.3s\",\r\n                        },\r\n                        onClick: () => setCollapsed(!collapsed),\r\n                    })}\r\n                    <Space style={{ float: \"right\" }}>\r\n                        {props.extra}\r\n                    </Space>\r\n                </div>\r\n            </Header>\r\n            <Content style={{ minHeight: \"auto\", height: \"calc(100vh - 68px)\" }}>\r\n                <Layout className=\"site-layout\" style={{ minHeight: \"auto\", height: \"calc(100vh - 68px)\" }}>\r\n                    <DesignerBoard\r\n                        controlType={controlType}\r\n                        onControlSelect={(control, srcElement) => {\r\n                            if (control && control.id.split(\"_\")[0] == \"detailTable\") {\r\n                                if (srcElement && srcElement.tagName == \"TR\") {\r\n                                    // setControlsAttrs(controlsAttrs.map(c => ({\r\n                                    //     ...c,\r\n                                    //     ...control.id == c.name ? { fieldTR: srcElement } : {}//如果选择了行，就放入属性的数据中\r\n                                    // })));\r\n                                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                                        props.onChange({\r\n                                            html:\r\n                                                props.value?.html,\r\n                                            controlsAttrs: (props.value?.controlsAttrs ?? []).map(c => ({\r\n                                                ...c,\r\n                                                ...control.id == c.name ? { fieldTR: srcElement } : {}//如果选择了行，就放入属性的数据中\r\n                                            }))\r\n                                        });\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // setControlsAttrs(controlsAttrs.map(c => ({\r\n                                    //     ...c,\r\n                                    //     ...control.id == c.name ? { fieldTR: undefined } : {}//如果选择了行，就放入属性的数据中\r\n                                    // })));\r\n                                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                                        props.onChange({\r\n                                            html:\r\n                                                props.value?.html,\r\n                                            controlsAttrs: (props.value?.controlsAttrs ?? []).map(c => ({\r\n                                                ...c,\r\n                                                ...control.id == c.name ? { fieldTR: undefined } : {}//如果选择了行，就放入属性的数据中\r\n                                            }))\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                            //获取控件的信息并且显示在右侧属性栏中\r\n                            setControlElement(control);\r\n                        }}\r\n                        onEditorChange={(htmlStr, controlIds) => {\r\n                            setControlElement(undefined);//有可能删除的就是当前选中的控件，为了防止设置属性组件报错，这里将属性重置为未选择控件状态\r\n                            //1.将删除的控件属性也删掉,回退则将回退的组件加上\r\n                            //1.1在删除前，将其放入缓存中\r\n                            let _removeControlsAttrs = (props.value?.controlsAttrs ?? []).filter(c => !controlIds.map(con => con.name).includes(c.name));\r\n                            //1.2删除\r\n                            let resultControlsAttrs = (props.value?.controlsAttrs ?? []).filter(c => controlIds.map(con => con.name).includes(c.name));\r\n                            //1.3将controlIds有，controlsAttrs没有，且缓存removeControlsAttrs里有的数据加入controlsAttrs\r\n                            let recoveryControlsAttrs = removeControlsAttrs.filter((c: any) => controlIds.map(con => con.name).includes(c.name) && !(props.value?.controlsAttrs ?? []).map(con => con.name).includes(c.name));\r\n                            recoveryControlsAttrs = recoveryControlsAttrs.filter((c: any) => !resultControlsAttrs?.map(cc => cc.name).includes(c.name));\r\n                            resultControlsAttrs = [...resultControlsAttrs ?? [], ...recoveryControlsAttrs];\r\n                            //1.4将缓存里对应的控件删掉，回退的则加上\r\n                            setRemoveControlsAttrs([...removeControlsAttrs.filter(c => !recoveryControlsAttrs.map(cc => cc.name).includes(c.name)), ..._removeControlsAttrs ?? []]);\r\n\r\n                            //2.给组件指定其父组件\r\n                            let iframe: any = document.getElementsByClassName(\"tox-edit-area__iframe\"); //HTMLIFrameElement\r\n                            resultControlsAttrs = resultControlsAttrs.map(c => {\r\n                                let control = iframe[0].contentWindow.document.getElementById(c.name);\r\n                                let controlIdItem: any = controlIds.find(conn => conn.name == c.name);\r\n                                return {\r\n                                    ...c,\r\n                                    belongTo: controlIdItem.belongTo,\r\n                                    //如果这个组件是个新增组件，刚好又是明细表子组件，且当前行设置为了编辑行\r\n                                    ...controlIdItem.belongTo != \"window\" ? //那就是明细表组件\r\n                                        (getParentDetailTableFieldTr(control) ?//自己上级组件出现了TR元素，且有属性有detail-field=\"true\"\r\n                                            { tableField: true } :\r\n                                            {}\r\n                                        ) :\r\n                                        {} //全局组件\r\n                                }\r\n                            });\r\n                            // setControlsAttrs(resultControlsAttrs);\r\n                            if (props.onChange && typeof props.onChange === \"function\") {\r\n                                props.onChange({\r\n                                    html: htmlStr,\r\n                                    controlsAttrs: resultControlsAttrs\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                    <Setting\r\n                        controlAttrs={controlElement ? (props.value?.controlsAttrs ?? []).find(c => c.name == controlElement.id) : undefined}\r\n                        controlsAttrs={props.value?.controlsAttrs ?? []}\r\n                        controlElement={controlElement}\r\n                        macroControlsConfig={macroControlsConfig}\r\n                        onValuesChange={(values) => {\r\n                            let iframe: any = document.getElementsByClassName(\"tox-edit-area__iframe\"); //HTMLIFrameElement\r\n                            if (controlElement && props.value?.controlsAttrs) {\r\n                                let controlsAttr: any = props.value?.controlsAttrs.find(c => c.name == values.name);\r\n                                if (typeof values.fieldTR === \"boolean\") {\r\n                                    //说明srcElement这是明细表的当前选择的行\r\n                                    //将这个行里面的字段全部标记位明细表字段\r\n\r\n                                    //1.将原有明细表的控件全部设置为非表单字段\r\n                                    let newControlsAttrs = props.value?.controlsAttrs.map(c => ({\r\n                                        ...c,\r\n                                        ...getIdsFromHTMLCollection(controlElement.getElementsByClassName(\"mceTmpl\")).includes(c.name) ? { tableField: undefined } : {}\r\n                                    }));\r\n                                    if (values.fieldTR) {\r\n                                        //2.将选择的行包含的字段设置为表单字段\r\n                                        newControlsAttrs = newControlsAttrs.map(c => ({\r\n                                            ...c,\r\n                                            ...getIdsFromHTMLCollection(controlsAttr.fieldTR.getElementsByClassName(\"mceTmpl\")).includes(c.name) ? { tableField: true } : {}\r\n                                        }));\r\n                                    }\r\n                                    // setControlsAttrs(newControlsAttrs);\r\n                                    if (props.onChange && typeof props.onChange === \"function\") {\r\n                                        props.onChange({\r\n                                            html: iframe[0].contentWindow.document.getElementsByTagName('body')[0].innerHTML,\r\n                                            // props.value?.html,\r\n                                            controlsAttrs: newControlsAttrs\r\n                                        });\r\n                                    }\r\n                                    return;\r\n                                }\r\n                                // setControlsAttrs([...controlsAttrs.filter(c => c.name != values.name), { ...controlsAttr, ...values }])\r\n                                if (props.onChange && typeof props.onChange === \"function\") {\r\n                                    props.onChange({\r\n                                        html: iframe[0].contentWindow.document.getElementsByTagName('body')[0].innerHTML,\r\n                                        // props.value?.html,\r\n                                        controlsAttrs: [...props.value?.controlsAttrs.filter(c => c.name != values.name), { ...controlsAttr, ...values }]\r\n                                    });\r\n                                }\r\n                            }\r\n                        }}\r\n                        onControlsAttrsChange={(v) => {\r\n                            if (props.onChange && typeof props.onChange === \"function\") {\r\n                                props.onChange({\r\n                                    html: props.value?.html,\r\n                                    controlsAttrs: v\r\n                                });\r\n                            }\r\n                        }}\r\n                    />\r\n                </Layout>\r\n            </Content>\r\n        </Layout>\r\n    </Layout >;\r\n}\r\n\r\nexport default FormPlus;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FormPlus from './components/FormPlus';\nimport { IControlsAttrs } from './components/FormPlus/data';\nimport { Button } from 'antd';\nimport { FileSearchOutlined } from '@ant-design/icons';\n\nfunction App() {\n  const [value, setValue] = useState<{\n    controlsAttrs?: IControlsAttrs[],\n    html?: string;\n  }>({\n    controlsAttrs: [],\n    html: \"\"\n  });\n  return <FormPlus value={value} onChange={v=>setValue(v)} extra={<>\n    <Button onClick={async () => {\n        console.log(value);\n    }} ><FileSearchOutlined />保存</Button>\n</>} />\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}